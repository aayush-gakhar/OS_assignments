diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index f6b5779..4b6ded5 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -369,6 +369,8 @@
 445	common	landlock_add_rule	sys_landlock_add_rule
 446	common	landlock_restrict_self	sys_landlock_restrict_self
 447	common	memfd_secret		sys_memfd_secret
+448	common	writer			sys_writer
+449	common	reader			sys_reader
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff --git a/kernel/sys.c b/kernel/sys.c
index ef1a78f..7b94264 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -154,6 +154,13 @@ int fs_overflowgid = DEFAULT_FS_OVERFLOWGID;
 EXPORT_SYMBOL(fs_overflowuid);
 EXPORT_SYMBOL(fs_overflowgid);
 
+int start=0;
+int end=0;
+int size=100;
+int allocated = 0;
+long *queue;
+static DECLARE_RWSEM(rw_sem);
+
 /*
  * Returns true if current's euid is same as p's uid or euid,
  * or has CAP_SYS_NICE to p's user_ns.
@@ -200,6 +207,57 @@ static int set_one_prio(struct task_struct *p, int niceval, int error)
 	return error;
 }
 
+int enqueue(long *num){
+	long c;
+	if(end == size){
+		return -1;
+	}
+	c = __copy_from_user(&queue[end], num, sizeof(long));
+	end++;
+	if(c<0 || c == sizeof(queue)){
+		return -EFAULT;
+	}
+	return 0;
+}
+
+int dequeue(long *num){
+	long c;
+	int i=0;
+	if(start == end){
+		return -1;
+	}
+	c = __copy_to_user(num, &queue[start], sizeof(long));
+	if(c<0 || c == sizeof(queue)){
+		return -EFAULT;
+	}
+	while(i<end){
+		queue[i] = queue[i+1];
+		i++;
+	}
+	end--;
+	return 0;
+}
+
+SYSCALL_DEFINE1(writer, long*, num){
+	int return_val;
+	down_write(&rw_sem);
+	if(allocated == 0){
+		queue = (long*)kmalloc(sizeof(long)*size,GFP_KERNEL);
+		allocated = 1;
+	}
+	return_val = enqueue(num);
+	up_write(&rw_sem);
+	return return_val;
+}
+
+SYSCALL_DEFINE1(reader, long*, num){
+	int return_val;
+	down_read(&rw_sem);
+	return_val = dequeue(num);
+	up_read(&rw_sem);
+	return return_val;
+}
+
 SYSCALL_DEFINE3(setpriority, int, which, int, who, int, niceval)
 {
 	struct task_struct *g, *p;
